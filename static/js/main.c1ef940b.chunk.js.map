{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","deaths","recovered","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toLocaleDateString","url","fetchData","country","a","otherUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","pays","name","console","log","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","option","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","props","fetchedData","setState","state","this","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1ef940b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'; \nimport  styles from './Cards.module.css';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nconst Cards = ({data:{confirmed, deaths,recovered, lastUpdate}}) => {\n    if(!confirmed) return 'Loading...';\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Nombre d'infectés</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"/>\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toLocaleDateString()}</Typography>\n                        <Typography variant=\"body2\">Nombre des cas actifs de la COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Nombre de guéris</Typography>\n                        <Typography variant=\"h5\">\n                        <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"/>\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toLocaleDateString()}</Typography>\n                        <Typography variant=\"body2\">Nombre de cas guéris de la COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Nombre de morts</Typography>\n                        <Typography variant=\"h5\">\n                        <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"/>\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toLocaleDateString()}</Typography>\n                        <Typography variant=\"body2\">Nombre de deces de la COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n\n        </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios'\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    let otherUrl = url;\n    if(country) {\n       otherUrl = `${url}/countries/${country}`;\n    }\n    try{\n        const{data:{confirmed,recovered, deaths, lastUpdate}} = await axios.get(otherUrl);\n         \n        return { confirmed, recovered, deaths, lastUpdate };\n\n\n    }catch(error){\n\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n\n        const modifiedData = data.map((dailyData) => ({\n            confirmed:dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate\n        }));\n\n        return modifiedData;\n    }catch (error) {\n\n    }\n}\n\nexport const fetchCountries = async () => {\n    try{\n        const {data:{countries}}  = await axios.get(`${url}/countries`);\n\n        return countries.map((pays) => pays.name);\n        \n    }catch(error){\n        console.log(error)\n    }\n}","import React, { useState, usesEffect, useEffect} from 'react';\nimport {fecthDailyData, fetchDailyData} from '../../api';\nimport {Line, Bar} from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({data:{confirmed, deaths, recovered}, country}) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async ()=> {\n            setDailyData(await fetchDailyData());\n        }\n        fetchAPI();\n    }, []);\n\n    const lineChart = (\n        dailyData.length ?(\n        <Line data={{\n            labels: dailyData.map(({date}) => date),\n            datasets: [{\n                data: dailyData.map(({ confirmed }) => confirmed),\n                label: 'Infected',\n                borderColor: '#3333ff',\n                fill: true\n            }, {\n                data: dailyData.map(({ deaths }) => deaths),\n                label: 'Morts',\n                borderColor: 'red',\n                backgroundColor: 'rgba(255,0,0,0.5)',\n                fill: true\n            }]}}\n    />): null\n    );\n    const barChart = (\n        confirmed\n        ? (\n            <Bar\n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: [{\n                        label: 'People',\n                        backgroundColor: [\n                            'rgba(0, 0, 255, 0.5)',\n                            'rgba(0, 255, 0, 0.5)',\n                            'rgba(255, 0, 0, 0.5)'\n                        ],\n                        data: [confirmed.value, recovered.value, deaths.value]\n                    }]\n                    \n                }}\n               option ={{\n            legend: {display: false},\n            title: { display: true, text:`Current state in ${country}`}\n        }}\n        />\n    ): null\n    );\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart:lineChart}\n        </div>\n    )\n}\n\nexport default Chart;","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport styles from './CountryPicker.module.css'\nimport { fetchCountries } from '../../api';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries (await fetchCountries());\n        }\n        fetchAPI();\n    }, [setFetchedCountries]);\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue = \"\" onChange={(e)=> handleCountryChange(e.target.value)}>\n                <option value=\"\">Monde entier</option>\n                {fetchedCountries.map((country, i) => <option key= {i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker;","import React from 'react'\nimport Cards from './components/Cards/Cards';\nimport Chart from './components/Chart/Chart';\nimport CountryPicker from './components/CountryPicker/CountryPicker'\nimport styles from './App.module.css';\nimport { fetchData } from './api';\n\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            data: {},\n            country: '',\n        };\n\n    }\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n        this.setState({data: fetchedData});\n    }\n\nhandleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country});\n} \n\n    render(){\n        const {data, country} = this.state;\n        return(\n            <div className={styles.container}>\n                <Cards data ={data}/>\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Chart data={data} country={country}  />\n            </div>\n        )\n    }\n}\n\nexport default App; ","import React from 'react'\nimport ReactDom from 'react-dom'\nimport App from './App'\n\nReactDom.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}